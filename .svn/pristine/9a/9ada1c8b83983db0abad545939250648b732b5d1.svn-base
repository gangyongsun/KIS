package cn.com.goldwind.kis.shiro.cache;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

import org.apache.shiro.session.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import cn.com.goldwind.kis.utils.LoggerUtils;
import cn.com.goldwind.kis.utils.SerializeUtil;
import cn.com.goldwind.kis.utils.redis.RedisUtil;
import lombok.Data;
import redis.clients.jedis.Jedis;

/**
 * Redis Manager Utils
 * 
 * @author alvin
 *
 */
@Component
@Data
public class JedisManager {

	@Autowired
	private RedisUtil redisUtil;

	/**
	 * 获取所有Session
	 * 
	 * @param dbIndex
	 * @param redisShiroSession
	 * @return
	 * @throws Exception
	 */
	public Collection<Session> AllSession(int dbIndex, String redisShiroSession) {
		Set<Session> sessions = new HashSet<Session>();
		Jedis jedis = null;
		try {
			jedis = redisUtil.getJedis();
			jedis.select(dbIndex);

			Set<byte[]> byteKeys = jedis.keys((JedisShiroSessionRepository.REDIS_SHIRO_ALL).getBytes());
			if (byteKeys != null && byteKeys.size() > 0) {
				for (byte[] byteKey : byteKeys) {
					Session obj = SerializeUtil.deserialize(jedis.get(byteKey), Session.class);
					if (obj instanceof Session) {
						sessions.add(obj);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (jedis != null) {
				redisUtil.returnResource(jedis);
			}
		}
		return sessions;
	}

	public byte[] getValueByKey(int dbIndex, byte[] key) {
		byte[] result = null;
		Jedis jedis = null;
		try {
			jedis = redisUtil.getJedis();
			jedis.select(dbIndex);
			result = jedis.get(key);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (jedis != null) {
				redisUtil.returnResource(jedis);
			}
		}
		return result;
	}

	public void deleteByKey(int dbIndex, byte[] key) {
		Jedis jedis = null;
		try {
			jedis = redisUtil.getJedis();
			jedis.select(dbIndex);
			Long result = jedis.del(key);
			LoggerUtils.fmtDebug(getClass(), "删除Session结果：%s", result);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (jedis != null) {
				redisUtil.returnResource(jedis);
			}
		}
	}

	public void saveValueByKey(int dbIndex, byte[] key, byte[] value, int expireTime) {
		Jedis jedis = null;
		try {
			jedis = redisUtil.getJedis();
			jedis.select(dbIndex);
			jedis.set(key, value);
			if (expireTime > 0) {
				jedis.expire(key, expireTime);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (jedis != null) {
				redisUtil.returnResource(jedis);
			}
		}
	}

}
